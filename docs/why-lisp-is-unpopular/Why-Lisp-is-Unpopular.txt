Why we think Lisp was not very popular
======================================
Author: Shlomi Fish
Email: shlomif@iglu.org.il

Introduction
------------

TODO : Fill in.

No good handling of text and "octet streams"
--------------------------------------------

* UNIX/C/TCP/IP's managing of octet streams and sequences vs. Lisp's object
handling (not necessarily in the OOP sense).

* A good language should have support for both - Perl starting from 5,
Python, Ruby.

* No interpolation.

* No regexes (can be implemented but non-standard).

* People keep telling me to use Domain Specific languages (DSLs) to build a
syntax methodically instead of agreeing that a templating system is a good
idea. ("Less is more" as opposed to TIMTOWTDI).

** Don't output SQL directly - use a DSL - no support for something like
$dbh->quote() or placeholders in CLSQL.

* No support for interpolation.

* No support for here-docs.

* You need to write a DSL instead of just outputting the text the way
you want and getting on with the rest of your life.

* Conclusion: good text support is needed, if you want to attract
Perl 5 / Python / Ruby / JS / whatever hackers.
** And there are likely very few programmer-wannabes who will be influenced by
people who are not their elders or their superiors, so it's a vicious cycle.

Competing implementations
-------------------------

* Scheme has a very large number of implementations for a given platform (C,
JVM, etc.).

* Writing a Scheme implementation seems to be a rite of passage:
** A Schemer on #scheme admitted that he hadn't written a Scheme implementation
yet so he doesn't know it too well.
* Many of these implementations end up as dinky open-source projects.

* Probably a symptom of a language being too simple and minimalistic.

* You don't see Perl 5, Python or Ruby people writing their own implementation
for enlightenment.

* Multiple competing implementations fragment the brain-share of the language,
mandate that low-level code be written in a different subroutine API, create
implementation-specific extensions (with incompatible APIs) and convert Scheme
(or Common Lisp) into what a correspondent said was a "family of languages"
instead of one unified language like Perl 5, Python, Ruby or PHP are.

Over verbosity
--------------

* Common Lisp and Scheme tend to be relatively verbose in comparison to


Unusuble Core Language
----------------------

* Expecting the programmer to write many abstractions on his own and create
his own language above CL or Scheme, instead of using the language directly.

* Good support for Meta-programming is not a bad idea, but the core language
must be usable right away.

* "I think that ordinary people dislike abstraction." -- Larry Wall.
http://www.perl.org.il/presentations/larry-wall-present-continuous-future-perfect/transcript.html[Source: "Present Continuous, Future Perfect"]

* Cite the MJD comp.lang.lisp thing about awk vs. Scheme/CL.
